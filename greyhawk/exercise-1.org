** 练习1-1 
在你自己的系统中运行 “hello, world” 程序。 再有意去掉程序中的部分内容，看看会得到什么出错信息。
#+BEGIN_SRC C
  #include <stdio.h>

  int main()
  {
    printf("hello, ");
    printf("world");
    printf("\n");
  }
#+END_SRC

#+RESULTS:
| hello | world |

** 练习1-2
做个实验，当printf函数的参数字符串中包含\c(其中c是上面的转义字符串序列中未曾列出的某一个字符）时，观察一下会出现什么情况。

#+BEGIN_SRC C

  #include <stdio.h>

  int main()
  {
    printf("hello,");
    printf("world");
    printf("\c");
  }
#+END_SRC

#+RESULTS:
| hello | worldc |

** 练习1-3
修改温度转换程序，使之能在转换表的顶部打印一个标题。
#+BEGIN_SRC C
  #include <stdio.h>

  int main()
  {
    float fahr, celsius;
    int lower, upper, step;

    lower = 0;
    upper = 300;
    step = 20;

    fahr = lower;
    printf("%3s %6s\n", "fahr", "celsius");
    printf("%3s %6s\n", "---", "------");
    while(fahr <= upper) {
      celsius = (5.0 / 9.0) * (fahr - 32.0);
      printf("%3.0f %6.1f\n", fahr, celsius);
      fahr = fahr + step;
    }
  }
#+END_SRC

#+RESULTS:
| fahr | celsius |
|  --- |  ------ |
|    0 |   -17.8 |
|   20 |    -6.7 |
|   40 |     4.4 |
|   60 |    15.6 |
|   80 |    26.7 |
|  100 |    37.8 |
|  120 |    48.9 |
|  140 |    60.0 |
|  160 |    71.1 |
|  180 |    82.2 |
|  200 |    93.3 |
|  220 |   104.4 |
|  240 |   115.6 |
|  260 |   126.7 |
|  280 |   137.8 |
|  300 |   148.9 |

** 练习1-4
编写一个程序打印摄氏温度转换为相应华氏温度的转换表
#+BEGIN_SRC C
  #include <stdio.h>

  int main()
  {
    float fahr, celsius;
    int lower, upper, step;
  
    lower = 0;
    upper = 100;
    step = 10;

    celsius = lower;
    printf("%6s %3s\n", "celsius", "fahr");
    printf("%6s %3s\n", "------", "---");
    while(celsius <= upper) {
      fahr = celsius * 9.0 / 5.0 + 32.0;
      printf("%6.0f %3.0f\n", celsius, fahr);
      celsius = celsius + step;
    }
  }

#+END_SRC

#+RESULTS:
| celsius | fahr |
|  ------ |  --- |
|       0 |   32 |
|      10 |   50 |
|      20 |   68 |
|      30 |   86 |
|      40 |  104 |
|      50 |  122 |
|      60 |  140 |
|      70 |  158 |
|      80 |  176 |
|      90 |  194 |
|     100 |  212 |

** 练习1-5
修改温度转换程序，要求以逆序打印温度转换表

#+BEGIN_SRC C
  #include <stdio.h>

  int main()
  {
    float fahr, celsius;
    int lower, upper, step;

    lower = 0;
    upper = 300;
    step = 20;

    fahr = upper;
    printf("%3s %6s\n", "fahr", "celsius");
    printf("%3s %6s\n", "---", "------");
    while(fahr >= lower) {
      celsius = (5.0 / 9.0) * (fahr - 32.0);
      printf("%3.0f %6.1f\n", fahr, celsius);
      fahr = fahr - step;
    }
  }
#+END_SRC

#+RESULTS:
| fahr | celsius |
|  --- |  ------ |
|  300 |   148.9 |
|  280 |   137.8 |
|  260 |   126.7 |
|  240 |   115.6 |
|  220 |   104.4 |
|  200 |    93.3 |
|  180 |    82.2 |
|  160 |    71.1 |
|  140 |    60.0 |
|  120 |    48.9 |
|  100 |    37.8 |
|   80 |    26.7 |
|   60 |    15.6 |
|   40 |     4.4 |
|   20 |    -6.7 |
|    0 |   -17.8 |

** 练习1-6
验证表达式 getchar() != EOF 的值是0还是1。
#+BEGIN_SRC C
  #include <stdio.h>

  int main()
  {
    int c;
    c = (getchar() != EOF);
    printf("%d", c);
  }
#+END_SRC

#+RESULTS:
: 0

** 练习1-7
编写一个打印 EOF 值的程序
#+BEGIN_SRC C
  #include <stdio.h>

  int main()
  {
    int c;
    c = getchar();
    printf("%d", c);
  }

#+END_SRC

** 练习1-8
编写一个统计空格、制表符与换行个数的程序。
#+BEGIN_SRC C
  #include <stdio.h>

  int main()
  {
    long nc;
    int c;

    nc = 0;
    while((c = getchar()) != EOF) {
      if(c == '\n' || c == '\t' || c == ' ')
        ++nc;
    }
    printf("%ld\n", nc);
  }
#+END_SRC

** 练习1-9
编写一个将输入复制到输出的程序，并将其中连续的多个空格用一个空格代替。
#+BEGIN_SRC C
  #include <stdio.h>

  int main()
  {
    int c;
    int nb;

    nb = 0;

    while((c = getchar()) != EOF) {
      if (c == ' ')
        ++nb;
      else
        nb = 0;
      if (nb < 2)
        putchar(c);
    }
  }

#+END_SRC

** 练习1-10
编写一个将输入复制到输出的程序，并将其中的制表符替换为\t,把回退符号替换为\b, 把反斜杠替换为\\。这样也可以将制表符与回退符以可见的方式显示出来。
#+BEGIN_SRC C
#include <stdio.h>

int main()
{
  int c;

  while((c = getchar()) != EOF) {
    if (c == '\t')
      printf("\\t");
    else if (c == '\b')
      printf("\\b");
    else if (c == '\\')
      printf("\\\\");
    else
      putchar(c);
  }
}

#+END_SRC
** 练习1-12
编写一个程序，以每行一个单词的形式打印其输入
#+BEGIN_SRC C
#include <stdio.h>

#define IN 0
#define OUT 1

int main()
{
  int c;
  int state;

  state = IN;
  while((c = getchar()) != EOF) {
    if (c == ' ')
      state = OUT;
    else
      state = IN;
    if (state == IN)
      putchar(c);
    else
      printf("\n");
  }
}
#+END_SRC

#+RESULTS:
** 练习1-13
** 练习1-14
** 练习1-15-1
编写求幂函数
#+BEGIN_SRC C
  #include <stdio.h>

  int power(int base, int n);

  int power(int base, int n)
  {
    int i, p;

    p = 1;
    for(i = 0; i < n; i++)
      p = p * base;
    return p;
  }

  int main() {
    int i;

    for(i = 0; i < 10; i++)
      printf("%d %d %d\n", i, power(2, i), power(-3, i));
    return 0;
  }
#+END_SRC

#+RESULTS:
| 0 |   1 |      1 |
| 1 |   2 |     -3 |
| 2 |   4 |      9 |
| 3 |   8 |    -27 |
| 4 |  16 |     81 |
| 5 |  32 |   -243 |
| 6 |  64 |    729 |
| 7 | 128 |  -2187 |
| 8 | 256 |   6561 |
| 9 | 512 | -19683 |

** 练习1-15-2
编写求幂函数
#+BEGIN_SRC C
  #include <stdio.h>

  int power(int base, int n);
  int power(int base, int n)
  {
    if (n == 0)
      return 1;
    return base * power(base, --n);
  }

  int main() {
    int i;

    for(i = 0; i < 10; i++)
      printf("%d %d %d\n", i, power(2, i), power(-3, i));
  }
#+END_SRC

#+RESULTS:
| 0 |   1 |      1 |
| 1 |   2 |     -3 |
| 2 |   4 |      9 |
| 3 |   8 |    -27 |
| 4 |  16 |     81 |
| 5 |  32 |   -243 |
| 6 |  64 |    729 |
| 7 | 128 |  -2187 |
| 8 | 256 |   6561 |
| 9 | 512 | -19683 |

** 练习1-15-3
重新编写1.2节中的温度转换程序，使用函数实现温度转换计算
#+BEGIN_SRC C
  #include <stdio.h>

  float fahr_to_celsius(float f);
  float fahr_to_celsius(float f)
  {
    return (5.0 / 9.0) * (f - 32.0);
  }

  int main()
  {
    float fahr, celsius;
    int lower, upper, step;

    lower = 0;
    upper = 300;
    step = 20;

    fahr = lower;
    printf("%3s %6s\n", "fahr", "celsius");
    printf("%3s %6s\n", "---", "------");
    while(fahr <= upper) {
      celsius = fahr_to_celsius(fahr);
      printf("%3.0f %6.1f\n", fahr, celsius);
      fahr = fahr + step;
    }
  }
#+END_SRC

#+RESULTS:
| fahr | celsius |
|  --- |  ------ |
|    0 |   -17.8 |
|   20 |    -6.7 |
|   40 |     4.4 |
|   60 |    15.6 |
|   80 |    26.7 |
|  100 |    37.8 |
|  120 |    48.9 |
|  140 |    60.0 |
|  160 |    71.1 |
|  180 |    82.2 |
|  200 |    93.3 |
|  220 |   104.4 |
|  240 |   115.6 |
|  260 |   126.7 |
|  280 |   137.8 |
|  300 |   148.9 |

** 练习1-16
修改打印最长文本行的程序的主程序main，使之可以打印任意长度的输入行的长度，并尽可能多地打印文本
#+BEGIN_SRC C
  #include <stdio.h>
  #define MAXLINE 1000

  int getliner(char line[], int maxline);
  void copy(char to[], char from[]);

  int main()
  {
    int len;
    int max;
    char line[MAXLINE];
    char longest[MAXLINE];

    max = 0;
    while((len = getliner(line, MAXLINE)) > 0)
      if (len > max) {
        max = len;
        copy(longest, line);
      }
    if (max > 0) {
      printf("%s", longest);
    }
  }

  int getliner(char s[], int n)
  {
    int c, i;

    for(i=0; i<n-1 && (c = getchar()) != EOF && c != '\n'; i++)
      s[i] = c;
    if(c == '\n') {
      s[i] = c;
      ++i;
    }
    s[i] = '\0';
    return i;
  }

  void copy(char to[], char from[])
  {
    int i;

    i = 0;
    while((to[i] = from[i]) != '\0')
      ++i;

  }


#+END_SRC
** 练习1-17
编写一个程序，打印长度大于80个字符的所有输入行。
#+BEGIN_SRC C
  #include <stdio.h>

  #define MINSIZE 80
  #define MAXLINE 1000

  int getliner(char line[], int maxline);

  int main()
  {
    int len;
    char line[MAXLINE];

    while((len = getliner(line, MAXLINE)) > 0) {
      if (len > 80)
        printf("%s", line);
    }
  }

  int getliner(char s[], int n)
  {
    int c, i;

    for (i=0; i<n-1 && (c = getchar()) != EOF && c!= '\n'; ++i)
      s[i] = c;
    if (c == '\n') {
      s[i] = c;
      i++;
    }
    s[i] = '\0';
    return i;
  }
#+END_SRC
** 练习1-18
编写一个程序，删除每个输入行末尾的空格及制表符，并删除完全是空格的行。
#+BEGIN_SRC C
  #include <stdio.h>

  #define MAXLINE 1000

  int getliner(char line[], int maxline);
  int trim(char line[], int length);

  int main()
  {
    int len;
    char line[MAXLINE];

    while((len = getliner(line, MAXLINE)) > 0) {
      int l;
      l = trim(line, len);
      printf("%d: %s", l, line);
    }
  }

  int getliner(char s[], int n)
  {
    int c, i;

    for (i=0; i<n-1 && (c = getchar()) != EOF && c!='\n'; ++i)
      s[i] = c;
    if (c == '\n') {
      s[i] = c;
      i++;
    }
    s[i] = '\0';
    return i + 1;
  }

  int trim(char s[], int l)
  {
    int c;
    c = s[l - 3];
    if (c == ' ' || c == '\t') {
      s[l - 3] = s[l - 2];
      s[l - 2] = s[l - 1];
      return trim(s, l - 1);
    }
    else {
      return l;
    }
  }
#+END_SRC
** 练习1-19
编写函数reverse(s), 将字符串s中的字符顺序颠倒过来。使用该函数编写一个程序，每次颠倒一个输入行中的字符顺序
#+BEGIN_SRC C
  #include <stdio.h>

  #define MAXLINE 1000

  int getliner(char[], int);

  int getliner(char line[], int maxline)
  {
    int c, i;
    for (i=0; i<maxline-1 && (c = getchar()) != EOF && c!='\n'; ++i)
      line[i] = c;
    if(c == '\n') {
      line[i] = c;
      i++;
    }
    line[i] = '\0';
    return i + 1;
  }

  void reverse(char[], char[], int);
  void reverse(char s[], char d[], int l)
  {
    int i;
    for(i=0; i < l - 2; i++)
      d[l-i-3] = s[i];
    d[l-2] = '\n';
    d[l-1] = '\0';
  }

  int main()
  {
    int l;
    char line[MAXLINE];

    while((l = getliner(line, MAXLINE)) > 0) {
      char d[l];
      reverse(line, d, l);
      printf("%s", d);
    }
  }
#+END_SRC
** 练习1-20
编写程序detab, 将输入中的制表符替换成适当数目的空格，使空格充满到下一个制表符终止位的地方。假设制表符终止位的位置是固定的,
比如每隔n列就会出现一个制表符终止位。n应该作为变量还是符号常量呢？
#+BEGIN_SRC C

#+END_SRC

#+RESULTS:
